// Copyright (c) Microsoft. All rights reserved. 
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// THIS FILE IS NOT INTENDED TO BE EDITED. 
// 
// This file can be updated in-place using the Package Manager Console. To check for updates, run the following command:
// 
// PM> Get-Package -Updates

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace Naminator
{
    /// <summary>
    ///     Provides access to several common character sets as enumrable sequences.
    /// </summary>
    public static partial class Characters
    {
        private static readonly Lazy<char[]> unicode = new Lazy<char[]>(
            () => Enumerable.Range(0, 0xD7FF).Select(Convert.ToChar).ToArray());

        private static readonly Lazy<char[]> latinLetters = new Lazy<char[]>(
            () => LatinUppercase.Concat(LatinLowercase).ToArray());

        private static readonly Lazy<char[]> latinLettersAndNumbers = new Lazy<char[]>(
            () => LatinUppercase
                      .Concat(LatinLowercase)
                      .Concat(Digits)
                      .ToArray());

        private static readonly Lazy<char[]> latinLettersNumbersAndWhiteSpace = new Lazy<char[]>(
            () => LatinUppercase
                      .Concat(LatinLowercase)
                      .Concat(Digits)
                      .Concat(WhiteSpace)
                      .ToArray());

        private static readonly Lazy<char[]> latinLettersNumbersPunctuationAndWhiteSpace = new Lazy<char[]>(
            () => LatinUppercase.Concat(LatinLowercase)
                                .Concat(Digits)
                                .Concat(Punctuation)
                                .Concat(WhiteSpace)
                                .ToArray());

        private static readonly Lazy<char[]> latinLettersAndWhiteSpace = new Lazy<char[]>(
            () => LatinUppercase.Concat(LatinLowercase)
                                .Concat(WhiteSpace)
                                .ToArray());

        /// <summary>
        ///     Digits from 0 to 9.
        /// </summary>
        public static IReadOnlyList<char> Digits = GetCharacters('0', '9').ToArray();

        /// <summary>
        ///     Lowercase Latin letters
        /// </summary>
        public static IReadOnlyList<char> LatinLowercase = GetCharacters('a', 'z').ToArray();

        /// <summary>
        ///     Uppercase Latin letters
        /// </summary>
        public static IReadOnlyList<char> LatinUppercase = GetCharacters('A', 'Z').ToArray();

        /// <summary>
        ///     Common punctuation characters.
        /// </summary>
        /// <returns>Character Set</returns>
        public static IReadOnlyList<char> Punctuation =
            GetCharacters('!', '/')
                .Concat(GetCharacters(':', '@'))
                .Concat(GetCharacters('[', '`'))
                .Concat(GetCharacters('{', '~'))
                .ToArray();

        /// <summary>
        ///     The set of whitespace characters, excluding '\v' and '\f' for XML compatibility.
        /// </summary>
        public static readonly IReadOnlyList<char> WhiteSpace = Unicode()
            .Where(Char.IsWhiteSpace)
            .Except(new[] { '\v', '\f' })
            .ToArray();

        /// <summary>
        ///     ASCII characters from 0 - 127.
        /// </summary>
        /// <returns>Character Set</returns>
        public static readonly IReadOnlyList<char> Ascii = Enumerable.Range(0, 128)
                                                                   .Select(Convert.ToChar)
                                                                   .ToArray();

        /// <summary>
        ///     ASCII characters from 0 - 255.
        /// </summary>
        /// <returns>Character Set</returns>
        public static IReadOnlyList<char> AsciiExtended = Enumerable.Range(0, 256)
                                                                  .Select(Convert.ToChar)
                                                                  .ToArray();

        /// <summary>
        ///     Generates a character set bounded by the two provided characters, inclusive.
        /// </summary>
        /// <param name="from">Start Char</param>
        /// <param name="to">End Char</param>
        /// <returns>Result Character Set</returns>
        public static IEnumerable<char> GetCharacters(char from, char to)
        {
            var startIndex = Convert.ToInt32(@from);
            var endIndex = Convert.ToInt32(to);

            for (var i = startIndex; i <= endIndex; i++)
            {
                yield return Convert.ToChar(i);
            }
        }

        /// <summary>
        ///     Gets all Latin letters.
        /// </summary>
        /// <returns>Character Set</returns>
        public static IReadOnlyList<char> LatinLetters()
        {
            return latinLetters.Value;
        }

        /// <summary>
        ///     Gets all Latin letters and numbers.
        /// </summary>
        /// <returns>Character Set</returns>
        public static IReadOnlyList<char> LatinLettersAndNumbers()
        {
            return latinLettersAndNumbers.Value;
        }

        /// <summary>
        ///     Gets Latin letters, numbers, and whitespace characters.
        /// </summary>
        public static IReadOnlyList<char> LatinLettersNumbersAndWhiteSpace()
        {
            return latinLettersNumbersAndWhiteSpace.Value;
        }

        /// <summary>
        ///     Gets Latin letters, numbers, punctuation, and whitespace characters.
        /// </summary>
        public static IReadOnlyList<char> LatinLettersNumbersPunctuationAndWhiteSpace()
        {
            return latinLettersNumbersPunctuationAndWhiteSpace.Value;
        }

        /// <summary>
        ///     Gets all Latin letters and whitespace characters.
        /// </summary>
        /// <returns>Character Set</returns>
        public static IReadOnlyList<char> LatinLettersAndWhiteSpace()
        {
            return latinLettersAndWhiteSpace.Value;
        }

        /// <summary>
        ///     Gets all Unicode characters
        /// </summary>
        public static IReadOnlyList<char> Unicode()
        {
            return unicode.Value;
        }
    }

    public static partial class Names
    {
        #region FirstNames

        internal static string[] FirstNames = new[]
        {
            "Abe",
            "Ada",
            "Adonis",
            "Ahab",
            "Alan",
            "Albert",
            "Alec",
            "Alex",
            "Angela",
            "Angus",
            "Aragorn",
            "Arnold",
            "Arthur",
            "Ashmina",
            "Autumn",
            "Axl",
            "Babs",
            "Barack",
            "Barbara",
            "Barry",
            "Bernadette",
            "Bernie",
            "Bertha",
            "Bilbo",
            "Billy",
            "Blanche",
            "Bo",
            "Bonnie",
            "Boris",
            "Brad",
            "Branford",
            "Brenda",
            "Brendan",
            "Brett",
            "Brienne",
            "Brock",
            "Bruce",
            "Brunhilde",
            "Burt",
            "Cadwallader",
            "Caesar",
            "Cate",
            "Chalmers",
            "Charles",
            "Charlie",
            "Chet",
            "Chip",
            "Chuck",
            "Claude",
            "Clifford",
            "Clive",
            "Corgi",
            "Cormac",
            "Curly",
            "Daniel",
            "Django",
            "Dmitry",
            "Dolph",
            "Donald",
            "Doris",
            "Dusky",
            "Dwayne",
            "Edward",
            "Eleanor",
            "Elvis",
            "Enoch",
            "Flavor",
            "Frodo",
            "Gandalf",
            "Garth",
            "Gary",
            "George",
            "Gilligan",
            "Glinda",
            "Grace",
            "Grant",
            "Greedo",
            "Greta",
            "Grover",
            "Gustav",
            "Gwenda",
            "Hank",
            "Harrison",
            "Haskell",
            "Henrietta",
            "Henry",
            "Herbert",
            "Hirendra",
            "Homer",
            "Horatio",
            "Horst",
            "Hugh",
            "Iggy",
            "Italo",
            "Jake",
            "James",
            "Jane",
            "Jason",
            "Jean-Claude",
            "Jean-Luc",
            "Jean-Pierre",
            "Jedediah",
            "Jeff",
            "Jerry",
            "Jesco",
            "Jimbo",
            "Joey",
            "John",
            "Johnny",
            "Jonathan",
            "Jose",
            "Josephine",
            "João",
            "Judd",
            "Julie",
            "Julius",
            "Junebug",
            "Jürgen",
            "Justin",
            "Keith",
            "Kevin",
            "Kurt",
            "Laird",
            "Lando",
            "Larry",
            "Larry",
            "Lars",
            "Laverna",
            "Leia",
            "Leo",
            "Leslie",
            "Liam",
            "Linus",
            "Livar",
            "Lou",
            "Lourdes",
            "Lucilla",
            "Lucy",
            "Lukasz",
            "Lyle",
            "Mack",
            "Macy",
            "Madonna",
            "Mahadev",
            "Marge",
            "Marshall",
            "Marshawn",
            "Martin",
            "Marvin",
            "Mathleen",
            "Max",
            "Medea",
            "Mehmet",
            "Mercury",
            "Michelle",
            "Mick",
            "Miles",
            "Miley",
            "Milton",
            "Moe",
            "Nathan",
            "Neil",
            "Nichelle",
            "Nina",
            "Norbert",
            "Obi-Wan",
            "Oleg",
            "Optimus",
            "Ori",
            "Orlando",
            "Owen",
            "Ozzy",
            "Pat",
            "Patrick",
            "Paul",
            "Penélope",
            "Percy",
            "Pernilla",
            "Phillip",
            "Pierre",
            "Piotr",
            "Pratima",
            "Prithvi",
            "Qbert",
            "Queequeg",
            "Ralph",
            "Ram",
            "Randy",
            "Rhett",
            "Richard",
            "Ringo",
            "Roald",
            "Robert",
            "Roddy",
            "Roger",
            "Rohit",
            "Roland",
            "Rosario",
            "Rudy",
            "Sammy",
            "Scarlett",
            "Seamus",
            "Sebastian",
            "Sheb",
            "Shemp",
            "Sigmund",
            "Silas",
            "Skeletor",
            "Snake",
            "Stan",
            "Stanislas",
            "Starbuck",
            "Tarzan",
            "Terrence",
            "Tilbert",
            "Tim",
            "Tom",
            "Tommy",
            "Topper",
            "Travis",
            "Trina",
            "Trygve",
            "Ulna",
            "Ulysses",
            "Valerie",
            "Victoria",
            "Viggo",
            "Vince",
            "Vint",
            "Vlad",
            "Walter",
            "Whoopi",
            "Willard",
            "Woody",
            "Yimou",
            "Yuanfei",
            "Ziv",
            "Franchino",
            "Mitch",
            "Walker",
            "Harry"
        };

        #endregion

        #region LastNames

        internal static string[] LastNames = new string[]
        {
            "Affleck",
            "Alabama",
            "Alaska",
            "America",
            "Babbage",
            "Bacon",
            "Baggins",
            "Bailey",
            "Bakshi",
            "Ballmer",
            "Banner",
            "Berners-Lee",
            "Bieber",
            "Blanchette",
            "Bon Jovi",
            "Boole",
            "Brokaw",
            "Bronson",
            "Budweiser",
            "Buffett",
            "Burns",
            "Burton",
            "Byrd",
            "Caesar",
            "Calrissian",
            "Calvino",
            "Cerf",
            "Chang",
            "Cheddars",
            "Chimay",
            "Clapton",
            "Clinton",
            "Coltrane",
            "Crawford",
            "Cruise",
            "Cruz",
            "Curry",
            "da Vinci",
            "Dahl",
            "Danders",
            "Davis",
            "Diamond",
            "Dixit",
            "Dorito",
            "Durango",
            "Dynamite",
            "Eich",
            "Einstein",
            "Femur",
            "Fermi",
            "Ferrigno",
            "Fine",
            "Flav",
            "Fonzarelli",
            "Fowler",
            "Frakes",
            "Freud",
            "Gates",
            "Giraffe",
            "Goldberg",
            "Gorey",
            "Gosling",
            "Grabowski",
            "Greyskull",
            "Grimes",
            "Groves",
            "Gruber",
            "Guinness",
            "Guthrie",
            "Harvin",
            "Hazzard",
            "Headon",
            "Hilton",
            "Hopper",
            "Hoskins",
            "Howard",
            "Idaho",
            "Jagger",
            "Jenkins",
            "Jobs",
            "Johnson",
            "Jones",
            "Kelley",
            "Kennedy",
            "Kenobi",
            "Khan",
            "Kirk",
            "Knuth",
            "Koenig",
            "Lawrence",
            "Lee",
            "Lemming",
            "Lemur",
            "Lennon",
            "Liskov",
            "Lovelace",
            "Lucas",
            "Lundgren",
            "Lynch",
            "Markov",
            "Marmalados",
            "Marmoset",
            "Marsalis",
            "Martin",
            "Mathers",
            "McCarthy",
            "McCartney",
            "Michelangelo",
            "Miller",
            "Minksy",
            "Mix-A-Lot",
            "Mortensen",
            "Nevada",
            "Nichols",
            "Nixon",
            "Nutria",
            "O'Possum",
            "O'Toole",
            "Obama",
            "Odysseus",
            "Oppenheimer",
            "Osbourne",
            "Pabst",
            "Parker",
            "Patella",
            "Picard",
            "Pinkerton",
            "Pliskin",
            "Poncherello",
            "Pop",
            "Potter",
            "Presley",
            "Prime",
            "Proudfoot",
            "Puerco",
            "Ramirez",
            "Ramone",
            "Reenskaug",
            "Rodman",
            "Rollins",
            "Rose",
            "Rotten",
            "Rucker",
            "Sasquatch",
            "Satyanarayanan",
            "Schneier",
            "Shah",
            "Shannon",
            "Shatner",
            "Simone",
            "Simonon",
            "Simpson",
            "Skywalker",
            "Smith",
            "Solo",
            "Spock",
            "Stallman",
            "Stallone",
            "Stark",
            "Starr",
            "Steele",
            "Sterling",
            "Stewart",
            "Strangelove",
            "Strummer",
            "Szilard",
            "Takei",
            "Targaryen",
            "Teller",
            "Tennessee",
            "Texas",
            "Thunders",
            "Timberlake",
            "Torvalds",
            "Travis",
            "Trump",
            "Turing",
            "Vader",
            "Van Damme",
            "Vermeer",
            "Vigoda",
            "von Braun",
            "von Neumann",
            "Wang",
            "Weiss",
            "Wiener",
            "Williams",
            "Young",
            "Zhang",
            "Buchannon",
            "Zappa",
            "Battolame",
            "Fischiavento",
            "Potter"
        };

        #endregion

        #region LastNamePrexies

        internal static string[] LastNamePrefixes = new[]
        {
            "al ",
            "bin ",
            "Bon ",
            "D'",
            "De ",
            "De la ",
            "Di ",
            "L'",
            "Le",
            "Mac",
            "Mc",
            "O'",
            "van ",
            "Vander",
            "von ",
        };

        #endregion

        #region LastNameSuffixes

        internal static string[] LastNameSuffixes = new[]
        {
            "arello",
            "arito",
            "baum",
            "berg",
            "bottom",
            "ersons",
            "field",
            "garten",
            "head",
            "hoffer",
            "ito",
            "kins",
            "ly",
            "man",
            "mann",
            "ner",
            "s",
            "sen",
            "smith",
            "son",
            "sons",
            "stein",
            "ton",
            "worth",
        };

        #endregion

        #region Titles

        internal static string[] Titles = new[]
        {
            "Dr.",
            "Duke",
            "M.",
            "Ms.",
            "Mlle.",
            "Mme.",
            "Mr.",
            "Mrs.",
            "Prof.",
            "Rev.",
            "Sir",
            "Sgt.",
            "Pfc.",
            "Capt.",
        };

        #endregion

        #region Suffixes

        internal static string[] Suffixes = new[]
        {
            "D.D.S.",
            "II",
            "III",
            "IV",
            "Jr.",
            "Sr.",
            "Esq.",
            "PhD.",
            "Esq.",
        };

        #endregion

        #region

        internal static string[] CompanyNameFormats = new[]
        {
            "General {0}",
            "The {0} Company",
            "The {0} Corporation",
            "The {0} Group",
            "United {0}",
            "{0} & Co., Inc.",
            "{0} & Co., LLC",
            "{0} & Sons",
            "{0} Biotech",
            "{0} Bros.",
            "{0} Chemical",
            "{0} City",
            "{0} Communications",
            "{0} Corporation",
            "{0} Data",
            "{0} Dynamics",
            "{0} Energy",
            "{0} Engineering",
            "{0} Entertainment",
            "{0} Financial",
            "{0} Foods",
            "{0} Holdings",
            "{0} Inc.",
            "{0} Insurance",
            "{0} Intl.",
            "{0} Networks",
            "{0} Partners",
            "{0} Resorts",
            "{0} Sciences",
            "{0} Solutions",
            "{0} Technologies",
            "{0}, GmbH.",
            "{0}, LLC",
        };

        #endregion

        #region

        internal static string[] CompanyNameWordFormats = new[]
        {
            "Auto{0}",
            "Chem-{0}",
            "Con-{0}",
            "e{0}",
            "i{0}",
            "Net{0}",
            "Next{0}",
            "Omni{0}",
            "Sun{0}",
            "Total{0}",
            "Trans{0}",
            "Value-{0}",
            "You{0}",
            "{0}!",
            "{0}aroo",
            "{0}-o-rama",
            "{0}Co",
            "{0}com",
            "{0}era",
            "{0}ex",
            "{0}ify",
            "{0}igent",
            "{0}iprise",
            "{0}is",
            "{0}istics",
            "{0}ix",
            "{0}ola",
            "{0}oleum",
            "{0}opia",
            "{0}opic",
            "{0}Pets",
            "{0}r",
            "{0}Smart",
            "{0}soft",
            "{0}Star",
            "{0}ster",
            "{0}tastic",
            "{0}topia",
            "{0}tron",
            "{0}Tube",
            "{0}Zoom",
        };

        #endregion

        #region

        public static readonly string[] TopLevelDomains = new[]
        {
            ".com",
            ".biz",
            ".gov",
            ".io",
            ".it",
            ".ly",
            ".org",
            ".tv"
        };

        #endregion
    }

    public static partial class Words
    {
        #region Common

        public static readonly string[] Common = new[]
        {
            "ability",
            "able",
            "about",
            "above",
            "accept",
            "according",
            "across",
            "act",
            "action",
            "activity",
            "actually",
            "add",
            "address",
            "administration",
            "adult",
            "affect",
            "after",
            "again",
            "against",
            "age",
            "agency",
            "agent",
            "ago",
            "agree",
            "ahead",
            "air",
            "all",
            "allow",
            "almost",
            "along",
            "already",
            "also",
            "although",
            "always",
            "American",
            "among",
            "amount",
            "analysis",
            "anger",
            "animal",
            "another",
            "answer",
            "any",
            "anyone",
            "anything",
            "appear",
            "apply",
            "approach",
            "area",
            "argue",
            "arm",
            "around",
            "arrive",
            "art",
            "article",
            "artist",
            "as",
            "ask",
            "asparagus",
            "attack",
            "attention",
            "author",
            "authority",
            "available",
            "avocado",
            "avoid",
            "away",
            "baby",
            "back",
            "bad",
            "bag",
            "ball",
            "bank",
            "bar",
            "base",
            "bean",
            "beast",
            "beat",
            "beautiful",
            "because",
            "become",
            "bed",
            "before",
            "before",
            "begin",
            "behavior",
            "behind",
            "believe",
            "benefit",
            "best",
            "better",
            "between",
            "beyond",
            "big",
            "bill",
            "billion",
            "bird",
            "bit",
            "black",
            "blood",
            "blue",
            "board",
            "body",
            "bond",
            "book",
            "both",
            "box",
            "boy",
            "break",
            "bring",
            "broccoli",
            "broth",
            "brother",
            "build",
            "building",
            "business",
            "butter",
            "buy",
            "call",
            "camera",
            "campaign",
            "cancer",
            "candidate",
            "car",
            "card",
            "care",
            "care",
            "career",
            "carry",
            "case",
            "catch",
            "cause",
            "cell",
            "center",
            "central",
            "century",
            "certain",
            "certainly",
            "chair",
            "challenge",
            "chance",
            "change",
            "character",
            "charge",
            "check",
            "cheese",
            "chicken",
            "child",
            "choice",
            "choose",
            "church",
            "chutney",
            "city",
            "claim",
            "clam",
            "class",
            "clear",
            "clearly",
            "close",
            "coach",
            "coffee",
            "cold",
            "collection",
            "college",
            "color",
            "come",
            "commercial",
            "common",
            "community",
            "company",
            "compare",
            "computer",
            "concern",
            "concussion",
            "condition",
            "conference",
            "Congress",
            "consider",
            "contain",
            "continue",
            "contraption",
            "control",
            "cost",
            "could",
            "country",
            "couple",
            "courage",
            "course",
            "court",
            "cousin",
            "cover",
            "crab",
            "create",
            "crime",
            "croissant",
            "cultural",
            "culture",
            "cup",
            "current",
            "cut",
            "dark",
            "data",
            "daughter",
            "day",
            "dead",
            "deal",
            "deal",
            "death",
            "decade",
            "decide",
            "decision",
            "deep",
            "defense",
            "degree",
            "Democrat",
            "democratic",
            "describe",
            "design",
            "design",
            "despite",
            "detail",
            "determine",
            "develop",
            "development",
            "die",
            "difference",
            "different",
            "difficult",
            "direction",
            "director",
            "discover",
            "discuss",
            "discussion",
            "disease",
            "doctor",
            "dog",
            "door",
            "down",
            "down",
            "draw",
            "dream",
            "drive",
            "drop",
            "drug",
            "duck",
            "during",
            "each",
            "each",
            "early",
            "early",
            "east",
            "easy",
            "eat",
            "economic",
            "economy",
            "edge",
            "education",
            "effect",
            "effort",
            "eight",
            "either",
            "election",
            "else",
            "employee",
            "end",
            "energy",
            "enjoy",
            "enough",
            "enter",
            "entire",
            "environment",
            "especially",
            "establish",
            "even",
            "evening",
            "event",
            "ever",
            "every",
            "everybody",
            "everyone",
            "everything",
            "evidence",
            "exactly",
            "example",
            "executive",
            "exist",
            "expect",
            "experience",
            "expert",
            "explain",
            "eye",
            "face",
            "face",
            "fact",
            "factor",
            "fail",
            "fall",
            "fallacy",
            "family",
            "far",
            "farm",
            "father",
            "fear",
            "federal",
            "feel",
            "feeling",
            "few",
            "field",
            "fight",
            "figure",
            "fill",
            "film",
            "final",
            "finally",
            "financial",
            "find",
            "fine",
            "finger",
            "finish",
            "fire",
            "firm",
            "first",
            "fish",
            "five",
            "floor",
            "fly",
            "focus",
            "follow",
            "food",
            "foot",
            "force",
            "foreign",
            "forget",
            "form",
            "form",
            "former",
            "forward",
            "four",
            "free",
            "friend",
            "full",
            "fund",
            "future",
            "game",
            "garden",
            "gas",
            "general",
            "generation",
            "girl",
            "give",
            "glass",
            "gluttony",
            "goal",
            "good",
            "government",
            "grammar",
            "great",
            "green",
            "ground",
            "group",
            "grow",
            "growth",
            "guess",
            "guitar",
            "gun",
            "guy",
            "hair",
            "half",
            "hammer",
            "hand",
            "hang",
            "happen",
            "happy",
            "hard",
            "hard",
            "harm",
            "head",
            "health",
            "hear",
            "heart",
            "heat",
            "heavy",
            "help",
            "her",
            "here",
            "herself",
            "high",
            "him",
            "himself",
            "history",
            "hit",
            "hold",
            "home",
            "hope",
            "horse",
            "hospital",
            "hot",
            "hotel",
            "hour",
            "house",
            "how",
            "however",
            "huge",
            "human",
            "hundred",
            "husband",
            "idea",
            "identify",
            "image",
            "imagine",
            "impact",
            "important",
            "improve",
            "in",
            "include",
            "including",
            "increase",
            "indeed",
            "indicate",
            "individual",
            "indivisible",
            "industry",
            "information",
            "inside",
            "instead",
            "institution",
            "interest",
            "international",
            "interview",
            "into",
            "investment",
            "involve",
            "issue",
            "item",
            "its",
            "itself",
            "jam",
            "jelly",
            "job",
            "join",
            "junk",
            "junket",
            "jury",
            "just",
            "justice",
            "kale",
            "keep",
            "kelp",
            "ketchup",
            "kid",
            "kill",
            "kind",
            "knowledge",
            "land",
            "language",
            "large",
            "last",
            "late",
            "later",
            "laugh",
            "law",
            "lawyer",
            "lay",
            "lead",
            "leader",
            "learn",
            "least",
            "leave",
            "left",
            "leg",
            "legal",
            "less",
            "less",
            "let",
            "letter",
            "lettuce",
            "level",
            "lie",
            "life",
            "light",
            "like",
            "like",
            "likely",
            "line",
            "list",
            "listen",
            "litter",
            "little",
            "live",
            "lizard",
            "lobster",
            "local",
            "long",
            "look",
            "loop",
            "lose",
            "loss",
            "lot",
            "love",
            "low",
            "lozenge",
            "luck",
            "lunch",
            "machine",
            "macho",
            "magazine",
            "main",
            "maintain",
            "major",
            "man",
            "manage",
            "management",
            "manager",
            "many",
            "market",
            "marriage",
            "material",
            "matter",
            "may",
            "maybe",
            "me",
            "mean",
            "measure",
            "media",
            "medical",
            "meet",
            "meeting",
            "member",
            "memory",
            "mention",
            "message",
            "method",
            "middle",
            "might",
            "military",
            "million",
            "mind",
            "minute",
            "miss",
            "mittens",
            "model",
            "modern",
            "moment",
            "money",
            "month",
            "more",
            "morning",
            "most",
            "mother",
            "move",
            "movement",
            "movie",
            "much",
            "muck",
            "muffin",
            "music",
            "must",
            "mustard",
            "myself",
            "name",
            "name",
            "nation",
            "national",
            "natural",
            "nature",
            "near",
            "nearly",
            "necessary",
            "need",
            "need",
            "network",
            "never",
            "new",
            "news",
            "next",
            "nice",
            "night",
            "no",
            "none",
            "nope",
            "north",
            "note",
            "note",
            "nothing",
            "notice",
            "now",
            "number",
            "occur",
            "off",
            "offend",
            "offer",
            "office",
            "officer",
            "official",
            "often",
            "oh",
            "oil",
            "ok",
            "old",
            "on",
            "once",
            "one",
            "only",
            "onto",
            "open",
            "open",
            "operation",
            "opportunity",
            "order",
            "organization",
            "other",
            "otter",
            "our",
            "out",
            "out",
            "outside",
            "over",
            "over",
            "own",
            "owner",
            "page",
            "pain",
            "paper",
            "parent",
            "parsley",
            "part",
            "particular",
            "party",
            "pass",
            "past",
            "paste",
            "pastime",
            "patient",
            "pattern",
            "paws",
            "pay",
            "peace",
            "people",
            "per",
            "perform",
            "performance",
            "perhaps",
            "period",
            "person",
            "personal",
            "phone",
            "physical",
            "pick",
            "pickle",
            "picture",
            "piece",
            "placard",
            "place",
            "plan",
            "planet",
            "plant",
            "play",
            "play",
            "player",
            "pluck",
            "PM",
            "point",
            "poker",
            "police",
            "policy",
            "political",
            "politics",
            "poor",
            "popular",
            "population",
            "pork",
            "position",
            "possible",
            "power",
            "practice",
            "pram",
            "prepare",
            "present",
            "president",
            "pressure",
            "pretty",
            "price",
            "pride",
            "private",
            "probably",
            "problem",
            "process",
            "produce",
            "product",
            "production",
            "professor",
            "program",
            "project",
            "property",
            "protect",
            "prove",
            "provide",
            "public",
            "publicity",
            "puffin",
            "pull",
            "purpose",
            "push",
            "put",
            "quahog",
            "quality",
            "question",
            "quickly",
            "quite",
            "race",
            "radio",
            "radish",
            "raise",
            "range",
            "ratchet",
            "rate",
            "rather",
            "reach",
            "read",
            "ready",
            "real",
            "reality",
            "realize",
            "really",
            "reason",
            "receive",
            "recent",
            "recently",
            "recognize",
            "record",
            "red",
            "reduce",
            "reflect",
            "region",
            "relationship",
            "religious",
            "relish",
            "remain",
            "remember",
            "remove",
            "report",
            "represent",
            "Republican",
            "require",
            "research",
            "resource",
            "respond",
            "response",
            "rest",
            "result",
            "return",
            "reveal",
            "right",
            "rise",
            "risk",
            "road",
            "robot",
            "rock",
            "role",
            "room",
            "rule",
            "run",
            "salsa",
            "same",
            "sand",
            "save",
            "scallop",
            "scene",
            "school",
            "science",
            "scone",
            "sea",
            "season",
            "seat",
            "second",
            "section",
            "secular",
            "security",
            "see",
            "seek",
            "seem",
            "sell",
            "send",
            "sense",
            "series",
            "serious",
            "serve",
            "service",
            "set",
            "set",
            "seven",
            "several",
            "shake",
            "shampoo",
            "share",
            "shark",
            "sheep",
            "shoot",
            "short",
            "shortage",
            "should",
            "shoulder",
            "shovel",
            "show",
            "shrimp",
            "side",
            "sign",
            "significant",
            "similar",
            "simple",
            "simply",
            "since",
            "since",
            "sing",
            "single",
            "sister",
            "sit",
            "site",
            "situation",
            "six",
            "size",
            "skill",
            "skin",
            "small",
            "snowflake",
            "so",
            "soap",
            "social",
            "society",
            "soldier",
            "some",
            "somebody",
            "someone",
            "something",
            "sometimes",
            "son",
            "song",
            "soon",
            "sort",
            "sound",
            "source",
            "south",
            "space",
            "speak",
            "special",
            "specific",
            "spend",
            "sponge",
            "sport",
            "spring",
            "staff",
            "stage",
            "stand",
            "standard",
            "star",
            "start",
            "state",
            "state",
            "statement",
            "station",
            "stay",
            "steam",
            "step",
            "still",
            "stock",
            "stop",
            "store",
            "stork",
            "storm",
            "story",
            "strategy",
            "street",
            "strong",
            "structure",
            "student",
            "study",
            "study",
            "stuff",
            "style",
            "subject",
            "success",
            "such",
            "suction",
            "suddenly",
            "suggest",
            "summer",
            "supper",
            "support",
            "sure",
            "surf",
            "surface",
            "system",
            "table",
            "take",
            "talk",
            "tank",
            "task",
            "tax",
            "teach",
            "teacher",
            "team",
            "technology",
            "television",
            "tell",
            "ten",
            "tend",
            "tenderloin",
            "term",
            "test",
            "test",
            "than",
            "thank",
            "that",
            "them",
            "themselves",
            "then",
            "theory",
            "there",
            "these",
            "thing",
            "think",
            "third",
            "those",
            "though",
            "thought",
            "thousand",
            "three",
            "through",
            "throughout",
            "throw",
            "thus",
            "time",
            "today",
            "together",
            "tonight",
            "too",
            "top",
            "topiary",
            "total",
            "tough",
            "toward",
            "town",
            "trade",
            "traditional",
            "training",
            "trap",
            "treat",
            "treatment",
            "tree",
            "trial",
            "trip",
            "trouble",
            "true",
            "truth",
            "try",
            "turn",
            "TV",
            "two",
            "type",
            "under",
            "understand",
            "unit",
            "until",
            "up",
            "upon",
            "us",
            "use",
            "usually",
            "value",
            "vampire",
            "various",
            "very",
            "view",
            "violence",
            "visit",
            "voice",
            "waffle",
            "wait",
            "walk",
            "wall",
            "wallaby",
            "want",
            "war",
            "watch",
            "water",
            "way",
            "weapon",
            "wear",
            "week",
            "weight",
            "well",
            "well",
            "west",
            "whale",
            "whatever",
            "when",
            "when",
            "where",
            "whether",
            "which",
            "while",
            "white",
            "whole",
            "whom",
            "whose",
            "why",
            "wide",
            "wife",
            "win",
            "window",
            "within",
            "without",
            "wolf",
            "woman",
            "wonder",
            "word",
            "work",
            "worker",
            "world",
            "worry",
            "wrench",
            "write",
            "writer",
            "wrong",
            "yard",
            "yeah",
            "year",
            "yes",
            "yet",
            "yeti",
            "young",
            "your",
            "yourself",
            "zebra",
            "zombie",
        };

        #endregion
    }

    /// <remarks>
    /// Consider using this as the basis for a new Its.Enumerable
    /// </remarks>
    public static class AnyEnumerableExtensions
    {
        private static readonly ThreadLocal<Random> random = new ThreadLocal<Random>(() => new Random());

        /// <summary>
        /// Return the given enumerable as a list if it already is one. If it is not, returns a new list containing all the elements in it.
        /// </summary>
        /// <typeparam name="T">The type of the elements in the enumerable.</typeparam>
        /// <param name="source">The source enumerable.</param>
        /// <returns>The given enumerable as a list if it already is one. If it is not, returns a new list containing all the elements in it.</returns>
        public static IList<T> AsList<T>(this IEnumerable<T> source)
        {
            var sourceAsList = source as IList<T>;
            if (sourceAsList != null)
            {
                return sourceAsList;
            }

            return source.ToList();
        }

        public static void Shuffle<T>(this IList<T> source)
        {
            /*
             * From Wikipedia:
             * http://en.wikipedia.org/wiki/Fisher-Yates_shuffle
             * To shuffle an array a of n elements (indices 0..n-1):
             *   for i from n − 1 downto 1 do
             *        j ← random integer with 0 ≤ j ≤ i
             *        exchange a[j] and a[i]
             */

            for (int i = source.Count - 1; i >= 1; i--)
            {
                int j = random.Value.Next(i + 1);

                T temp = source[i];
                source[i] = source[j];
                source[j] = temp;
            }
        }

        public static IEnumerable<TResult> Zip<TFirst, TSecond, TThird, TResult>(
            this IEnumerable<TFirst> first,
            IEnumerable<TSecond> second,
            IEnumerable<TThird> third,
            Func<TFirst, TSecond, TThird, TResult> resultSelector)
        {
            return first.Zip(second).Zip(third, (firstAndSecondItem, thirdItem) => resultSelector(firstAndSecondItem.Item1, firstAndSecondItem.Item2, thirdItem));
        }

        public static IEnumerable<Tuple<TFirst, TSecond>> Zip<TFirst, TSecond>(this IEnumerable<TFirst> first, IEnumerable<TSecond> second)
        {
            return first.Zip(second, (firstElement, secondElement) => Tuple.Create(firstElement, secondElement));
        }
    }
}